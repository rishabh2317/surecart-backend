// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 1. users Table
model User {
  id              String       @id @default(uuid())
  authProviderId  String       @unique
  username        String       @unique
  email           String       @unique
  role            String       @default("SHOPPER")
  fullName        String?
  phone           String?
  instagramHandle String?
  profileImageUrl String?
  tier            String       @default("free")
  createdAt       DateTime     @default(now())
  
  collections Collection[]
  likes       UserLikes[]
  comments    Comment[]
  
  // Correctly defines the user's relationship to the Follow table
  following   Follow[]     @relation("Followers") // Users this user is following
  followers   Follow[]     @relation("Following") // Users who follow this user
}

// 2. brands Table
model Brand {
  id           String    @id @default(uuid())
  name         String    @unique // <-- ADD THIS @unique ATTRIBUTE
  websiteUrl   String?
  affiliateTag String?
  createdAt    DateTime  @default(now())
  products     Product[]
}

// 3. products Table
model Product {
  id              String               @id @default(uuid())
  source          String
  sourceProductId String
  name            String
  description     String?
  imageUrls       String[]
  baseUrl         String
  brandId         String?
  price           Float?
  currency        String?
  lastUpdatedAt   DateTime             @default(now()) @updatedAt
  brand           Brand?               @relation(fields: [brandId], references: [id])
  collections     CollectionProduct[]
  clicks          Click[]
}

// 4. collections Table
model Collection {
  id        String              @id @default(uuid())
  userId    String
  name      String
  slug      String
  createdAt DateTime            @default(now())
  user      User                @relation(fields: [userId], references: [id])
  products  CollectionProduct[]
  clicks    Click[]
  coverImageUrl   String?
  likedBy UserLikes[]
  description String?
  comments Comment[]
}

// 5. collection_products (Junction Table)
model CollectionProduct {
  collectionId  String
  productId     String
  displayOrder  Int
  creatorNote   String?
  collection    Collection @relation(fields: [collectionId], references: [id])
  product       Product    @relation(fields: [productId], references: [id])

  @@id([collectionId, productId])
}

// 6. analytics_clicks Table
model Click {
  id           BigInt     @id @default(autoincrement())
  collectionId String
  productId    String
  userAgent    String?
  ipAddress    String?
  createdAt    DateTime   @default(now())
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  product      Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
}
model UserLikes {
  userId       String
  collectionId String
  createdAt    DateTime   @default(now())
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@id([userId, collectionId])
}
model Follow {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
}

model Comment {
  id           String     @id @default(uuid())
  text         String
  userId       String
  collectionId String
  createdAt    DateTime   @default(now())

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
}
